import telebot

from card import descr
import text

import re
from time import sleep
from telebot import types

token = '7032117391:AAH4HD0J4OusBe9GT_hEg60gyuO8o4GAdOU'
bot = telebot.TeleBot(token)
remove_keyboard = telebot.types.ReplyKeyboardRemove()

# –°—Ç–∞—Ä—Ç
# Start
@bot.message_handler(commands=['start'])
def start_message(message):
    chatID = message.chat.id
    print("–ó–∞—à–µ–ª")

    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –º–∞–≥–∏—é ü™ê')

    markup.add(item1)

    bot.send_chat_action(chatID, 'typing')
    bot.send_message(chatID, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}!")

    bot.send_chat_action(chatID, 'typing')
    sleep(1)
    bot.send_message(chatID, "–Ø ‚Äì –±–æ—Ç —Ç–≤–æ–µ–≥–æ –±—É–¥—É—â–µ–≥–æüîÆ —Å—Ç—Ä–∞–∂–Ω–∏–∫ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –∏ —Ç–∞–π–Ω üßôüèª‚Äç‚ôÇÔ∏è")

    bot.send_chat_action(chatID, 'typing')
    sleep(2)
    bot.send_message(chatID, "–†–∞—Å–∫–ª–∞–¥—ã–≤–∞—è –∫–∞—Ä—Ç—ã –∏ —á–∏—Ç–∞—è –∑–≤–µ–∑–¥—ã üí´ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ç–∞–π–Ω—ã —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ üé©")

    bot.send_chat_action(chatID, 'typing')
    sleep(2)
    bot.send_message(chatID, "–î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ –∏ –ø–æ–∑–≤–æ–ª—å –º–Ω–µ –æ—Å–≤–µ—Ç–∏—Ç—å —Ç–≤–æ—ë –±—É–¥—É—â–µ–µ —Å–≤–µ—Ç–æ–º –º–∞–≥–∏–∏ –∏ –º—É–¥—Ä–æ—Å—Ç–∏! üôè")

    bot.send_chat_action(chatID, 'typing')
    sleep(4)
    bot.send_message(chatID, "–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏ —Å–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ üåô‚ú®", reply_markup=markup)

# –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=['text'])
def send_message(message):
    chatID = message.chat.id
    match message.text:
        case "–ü—Ä–∏–Ω—è—Ç—å –º–∞–≥–∏—é ü™ê":
            bot.send_message(chatID, "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è", reply_markup=remove_keyboard)
            bot.register_next_step_handler(message, get_name)
        case "–õ—é–±–æ–≤—å üíò":
            bot.send_message(chatID, f"_{text.descr}_", parse_mode="Markdown", reply_markup=remove_keyboard)
             
            bot.send_chat_action(chatID, 'typing')
            sleep(2)
            bot.send_message(chatID, "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞")

            bot.send_chat_action(chatID, 'typing')
            sleep(1)
            bot.send_message(chatID, "–ö–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç ?")
            bot.register_next_step_handler(message, get_partner_name)
        case "–ú–∞–≥–∏—è üîÆ":
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(chatID, "–°–∏–¥–∏ –∏ –¥—É–º–∞–π, —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞–ª—å—à–µ!")

        case "–î—É—Ä–∞–∫":
            photo = open('card/img/fool.jpg', 'rb')
            bot.send_photo(chatID, photo, caption=descr.fool, parse_mode="Markdown")

        case "–ú–∞–≥":
            photo = open('card/img/magician.jpg', 'rb')
            bot.send_photo(chatID, photo, caption=descr.magician, parse_mode="Markdown")

        


# User data
def get_name(message):
    chatID = message.chat.id

    name = message.text

    if name.isalpha() or name.isspace():
        print(name)

        bot.send_message(chatID, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –∏–º—è, –ø–æ–ª–Ω–æ–µ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞!")
        sleep(1)
        bot.send_message(chatID, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")

        bot.register_next_step_handler(message, get_age)
    else:
        bot.send_message(chatID, "–í –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
        bot.register_next_step_handler(message, get_name)


def get_age(message):
    chatID = message.chat.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('üë®')
    item2 = types.KeyboardButton('üëß')

    markup.add(item1, item2)

    age = message.text
    if re.match(r'\d{2}\.\d{2}\.\d{4}', age):
        print(age)

        bot.send_message(chatID, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª–æ–Ω –º—É–¥—Ä–æ—Å—Ç–∏ üßôüèª‚Äç‚ôÇÔ∏è")

        sleep(2)
        bot.send_message(chatID, "–ö–∞–∫–æ–≤ —Ç–≤–æ–π –ø–æ–ª?", reply_markup=markup)
        bot.register_next_step_handler(message, get_genus)
    else:
        bot.send_message(chatID, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *01.01.2001*", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_age)


def get_genus(message):
    chatID = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('–õ—é–±–æ–≤—å üíò')
    item2 = types.KeyboardButton('–ë—É–¥—É—é—â–µ–µ üîÆ')
    item3 = types.KeyboardButton('–ö–∞—Ä—Ç–∞ –¥–Ω—è ‚òÄÔ∏è')
    item4 = types.KeyboardButton('–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ üí∞')

    markup.add(item1, item2, item3, item4)

    match message.text:
        case 'üë®':
            print("–ü–∞—Ä–µ–Ω—å")
        case 'üëß':
            print("–î–µ–≤—É—à–∫–∞")

    bot.send_message(chatID, "–ë–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–∞–π–Ω—ã —Ç–≤–æ–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏", reply_markup=remove_keyboard)
    sleep(2)
    bot.send_message(chatID, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≥–∞–¥–∞–Ω–∏—è:", reply_markup=markup)

# Pertner data
def get_partner_name(message):
    chatID = message.chat.id

    name = message.text

    if name.isalpha() or name.isspace():
        print(name)

        bot.send_message(chatID, "–ö–æ–≥–¥–∞ –æ–Ω —Ä–æ–¥–∏–ª—Å—è?")
        bot.register_next_step_handler(message, get_partner_age)
    else:
        bot.send_message(chatID, "–í –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
        bot.register_next_step_handler(message, get_partner_name)


def get_partner_age(message):
    chatID = message.chat.id
    age = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    item1 = types.KeyboardButton('–ú–∞–≥–∏—è üîÆ')
    markup.add(item1)

    if re.match(r'\d{2}\.\d{2}\.\d{4}', age):        
        print(age)

        bot.send_message(chatID, "–°—É–ø–µ—Ä! –°–ø–∞—Å–∏–±–æ")
        bot.send_message(chatID, "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å", reply_markup=markup)
    else:
        bot.send_message(chatID, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *01.01.2001*", parse_mode="Markdown")
        bot.register_next_step_handler(message, get_partner_age)


bot.infinity_polling()